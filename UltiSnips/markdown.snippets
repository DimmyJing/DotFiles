snippet '(^(?:.*[^\w\\])?)mk' "Math" r
`!p snip.rv=match.group(1)`$$0$
endsnippet

snippet '(^(?:.*[^\w\\])?)dm' "Display Math" r
`!p snip.rv=match.group(1)`$$$0$$
endsnippet

snippet '(^(?:.*[^\w\\])?)fr' "Fraction" r
`!p snip.rv=match.group(1)`\frac{$1}{$2}$0
endsnippet

snippet '(^(?:.*[^\w\\])?)ab' "Angle Brackets" r
`!p snip.rv=match.group(1)`\langle $1\rangle
endsnippet

snippet '(^(?:.*[^\w\\])?)te' "Text" r
`!p snip.rv=match.group(1)`\text{$0}
endsnippet

snippet '(^(?:.*[^\w\\])?)sqrt' "Square Root" r
`!p snip.rv=match.group(1)`\sqrt{$0}
endsnippet

snippet '(^(?:.*[^\w\\])?)(\w|\\\w+)ve' "Vector" r
`!p snip.rv=f'{match.group(1)}\\vec{{{match.group(2)}}}'`
endsnippet

snippet '(^(?:.*[^\w\\])?)(\w|\\\w+)sq' "Square" r
`!p snip.rv=f'{match.group(1)}{match.group(2)}^2'`
endsnippet

snippet '(^(?:.*[^\w\\])?)(\w|\\\w+)\^([\w\\]+)' "Superscript" r
`!p snip.rv=f'{match.group(1)}{match.group(2)}^{{{match.group(3)}}}'`$0
endsnippet

snippet '(^(?:.*[^\w\\])?)(\w|\\\w+)\_([\w\\]+)' "Subscript" r
`!p snip.rv=f'{match.group(1)}{match.group(2)}_{{{match.group(3)}}}'`$0
endsnippet

snippet '(^(?:.*[^\w\\])?)mtx' "Matrix" r
`!p snip.rv=match.group(1)`\begin{bmatrix}$1\end{bmatrix}$0
endsnippet

snippet '(^(?:.*[^\w\\])?)la' "Lambda" r
`!p snip.rv=match.group(1)`\lambda
endsnippet

snippet '(^(?:.*[^\w\\])?)na' "Nabla" r
`!p snip.rv=match.group(1)`\nabla
endsnippet

snippet '(^(?:.*[^\w\\])?)mu' "mu" r
`!p snip.rv=match.group(1)`\mu
endsnippet

snippet '(^(?:.*[^\w\\])?)Ga' "Gamma" r
`!p snip.rv=match.group(1)`\Gamma
endsnippet

snippet '(^(?:.*[^\w\\])?)ca' "Cases" r
`!p snip.rv=match.group(1)`\begin{cases}$0\end{cases}
endsnippet

snippet '(^(?:.*[^\w\\])?)ra' "Rightarrow" r
`!p snip.rv=match.group(1)`\Rightarrow 
endsnippet

snippet '(^(?:.*[^\w\\])?)sp' "Sympy Block " r
`!p snip.rv=match.group(1)`sp $1 sp$0
endsnippet

snippet '(^(?:.*[^\w\\])?)in' "Integral" r
`!p snip.rv=match.group(1)`\int\limits_{$1}^{$2}$0
endsnippet

snippet '(^(?:.*[^\w\\])?)pa' "Partial" r
`!p snip.rv=match.group(1)`\frac{\partial $1}{\partial $2}$0
endsnippet

snippet 'lb' "Line Break" r

<br/>


endsnippet

snippet '(^(?:.*[^\w\\])?)re' "Real" r
`!p snip.rv=match.group(1)`\mathbb{R}
endsnippet

snippet '(^(?:.*[^\w\\])?)al' "Align" r
`!p snip.rv=match.group(1)`\begin{aligned}$1\end{aligned}$0
endsnippet

priority 10000
snippet 'sp(.*)sp' "Evaluate Sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

priority 10000
snippet 'sp(.*)spf' "Evaluate Sympy Floating" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('evalf(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet
